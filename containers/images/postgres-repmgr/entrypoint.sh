#!/bin/bash
set -e

generate_repmgr_config_base() {
  mkdir -p "$(dirname "$REPMGR_CONFIG_FILE")"
  cat > "${REPMGR_CONFIG_FILE}" <<-EOF
# Repmgr configuration generated by docker-entrypoint.sh
node_id=${NODE_ID}
node_name=${NODE_NAME}
conninfo='host=${NODE_NAME} user=${REPMGR_USER} dbname=${REPMGR_DB} connect_timeout=2'
data_directory='${PGDATA}'
failover=automatic
promote_command='/usr/bin/repmgr standby promote -f ${REPMGR_CONFIG_FILE} --log-to-file'
follow_command='/usr/bin/repmgr standby follow -f ${REPMGR_CONFIG_FILE} --log-to-file --upstream-node-id %n'
log_level=INFO
EOF
}

export REPMGR_CONFIG_FILE=${REPMGR_CONFIG_FILE:-/etc/repmgr/repmgr.conf}
export PGPASSWORD="${REPMGR_PASSWORD}"

if [ "$REPMGR_ROLE" = 'primary' ]; then
  # Check if the data directory is empty (first run)
  if [ ! -s "$PGDATA/PG_VERSION" ]; then
      echo "--- Initializing primary node ---"

      # 1. Initialize the database cluster
      initdb -U "$POSTGRES_USER" -D "$PGDATA"

      # 2. Append replication settings to postgresql.conf
      echo "shared_preload_libraries = 'repmgr'" >> "$PGDATA/postgresql.conf"
      echo "wal_level = replica" >> "$PGDATA/postgresql.conf"
      echo "max_wal_senders = 10" >> "$PGDATA/postgresql.conf"
      echo "max_replication_slots = 10" >> "$PGDATA/postgresql.conf"
      echo "hot_standby = on" >> "$PGDATA/postgresql.conf"
      echo "archive_mode = on" >> "$PGDATA/postgresql.conf"
      echo "archive_command = '/bin/true'" >> "$PGDATA/postgresql.conf" # Dummy command

      # 3. Append replication user access rules to pg_hba.conf
      echo "host replication ${REPMGR_USER} all trust" >> "$PGDATA/pg_hba.conf"
      echo "host ${REPMGR_DB} ${REPMGR_USER} all trust" >> "$PGDATA/pg_hba.conf"

      # 4. Start PostgreSQL temporarily to create the repmgr user and database
      pg_ctl -D "$PGDATA" -o "-c listen_addresses='*'" -w start
      createuser --superuser "$REPMGR_USER"
      createdb --owner="$REPMGR_USER" "$REPMGR_DB"
      pg_ctl -D "$PGDATA" -m fast -w stop

      echo "--- PostgreSQL initialized and configured ---"
  fi

  echo "--- Generating repmgr.conf for primary ---"
  generate_repmgr_config_base

  echo "--- Starting PostgreSQL and registering primary ---"
  # Start PostgreSQL in the background
  exec postgres &

  # Wait for PostgreSQL to be ready
  until pg_isready -q; do
    >&2 echo "Postgres is unavailable - sleeping"
    sleep 1
  done

  # Register the primary node if it's not already registered
  if ! repmgr -f "$REPMGR_CONFIG_FILE" cluster show | grep -q "node ${NODE_ID}"; then
      echo "--- Registering primary node ---"
      repmgr -f "$REPMGR_CONFIG_FILE" primary register
  else
      echo "--- Primary node already registered ---"
  fi

  echo "--- Starting repmgrd ---"
  exec repmgrd -f "$REPMGR_CONFIG_FILE" --daemonize=false

else
  
  # Ensure upstream host is set
  if [ -z "$REPMGR_UPSTREAM_HOST" ]; then
      echo "ERROR: REPMGR_UPSTREAM_HOST environment variable is not set."
      exit 1
  fi

  # Check if the data directory is empty (first run)
  if [ ! -s "$PGDATA/PG_VERSION" ]; then
      echo "--- Initializing standby node ---"

      # 1. Wait for the primary node to be ready
      echo "--- Waiting for primary node ($REPMGR_UPSTREAM_HOST) to be ready ---"
      until pg_isready -h "$REPMGR_UPSTREAM_HOST" -p 5432 -U "$REPMGR_USER"; do
          >&2 echo "Primary is unavailable - sleeping"
          sleep 5
      done
      echo "--- Primary node is ready ---"

      # 2. Clone data from the primary
      echo "--- Cloning data from primary ---"
      repmgr -h "$REPMGR_UPSTREAM_HOST" -U "$REPMGR_USER" -d "$REPMGR_DB" \
            standby clone -D "$PGDATA" --force

      echo "--- Standby clone complete ---"
  fi

  echo "--- Generating repmgr.conf for standby ---"
  generate_repmgr_config_base

  echo "--- Starting PostgreSQL and registering standby ---"
  # Start PostgreSQL in the background
  exec postgres &

  # Wait for local PostgreSQL to be ready (it will be in recovery mode)
  until pg_isready -q; do
    >&2 echo "Local Postgres is unavailable - sleeping"
    sleep 1
  done

  # Register the standby node if it's not already registered
  # The --force flag is useful in case of a previous failed attempt
  if ! repmgr -f "$REPMGR_CONFIG_FILE" cluster show | grep -q "node ${NODE_ID}"; then
      echo "--- Registering standby node ---"
      repmgr -f "$REPMGR_CONFIG_FILE" standby register --force
  else
      echo "--- Standby node already registered ---"
  fi

  echo "--- Starting repmgrd ---"
  exec repmgrd -f "$REPMGR_CONFIG_FILE" --daemonize=false
fi
unset PGPASSWORD
