name: Build container
run-name: Manual build of ${{ inputs.container_name }} container by @${{ github.actor }}

concurrency:
  group: build-container-${{ github.ref }}
  cancel-in-progress: false

on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      container_name:
        description: 'Name of the container to build'
        required: true
        type: choice
        options:
          - activemq
          - angular
          - apicast
          - camel-k
          - camel-karavan
          - cnpg-17
          - cnpg-16
          - debian-11-slim
          - debian-12-slim
          - golang-1.23
          - golang-1.24
          - helidon
          - java
          - jenkins
          - kafka
          - karaf
          - kong
          - micronaut
          - mongodb
          - mosquitto
          - nodejs
          - openapi-generator-cli
          - postgres-17
          - postgres-16
          - postgresql
          - python
          - python-3.11
          - python-3.12
          - python-3.13
          - quarkus
          - rabbitmq
          - rabbitmq-cluster-operator
          - redis
          - rocky-9
          - rocky-9-minimal
          - ruby
          - servicemix
#          - postgres-16-bullseye-oneshot
#          - cnpg-16-oneshot
      push_image:
        description: 'Push the image to the registries'
        default: true
        required: false
        type: boolean
      test_image:
        description: 'Test the image - note that this will only work if the image is a testable image with tests provided!'
        default: true
        required: false
        type: boolean
      push_readme:
        description: 'Push image readme. You can disable test_image and
          push_image to only push the readme. Pushing image OVERWRITES the
          readme - ALWAYS! If test_image and push_image are disabled, and the
          push_readme is enable the container is not built, tested or pushed,
          only the readme is pushed.'
        default: true
        required: false
        type: boolean
      next_containers:
        description: 'Next containers to build. This is a comma separated list of container names. The containers will be built in the order they are listed.'
        default: ''
        required: false
        type: string
jobs:
  build_container_amd64:
    name: Build container (amd64)
    runs-on: ubuntu-24.04
    env:
      QUAY_USER: ${{ secrets.QUAY_USER }}
      QUAY_PASS: ${{ secrets.QUAY_PASS }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      PUSH_IMAGE: ${{ inputs.push_image }}
      TEST_IMAGE: ${{ inputs.test_image }}
      PUSH_README: ${{ inputs.push_readme }}
      APIKEY__QUAY_IO: ${{ secrets.QUAY_API }}
    steps:
      - uses: actions/checkout@v4
      - name: Install prerequisites - docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin dnf
          sudo usermod -aG docker $USER
          sudo systemctl enable --now docker
      - name: Build the container, test, push and push readme
        run: |
          echo "CONTAINER_NAME: ${{ inputs.container_name }}"
          echo "CONTAINERS TO BUILD LIST: ${{ inputs.next_containers }}"
          pwd
          cd containers
          bash build-container.sh ${{ inputs.container_name }}

  build_container_arm64:
    name: Build container (arm64)
    needs: build_container_amd64 # Ensure amd64 build finishes first
    runs-on: ubuntu-24.04-arm
    env:
      QUAY_USER: ${{ secrets.QUAY_USER }}
      QUAY_PASS: ${{ secrets.QUAY_PASS }}
      DOCKER_USER: ${{ secrets.DOCKER_USER }}
      DOCKER_PASS: ${{ secrets.DOCKER_PASS }}
      PUSH_IMAGE: ${{ inputs.push_image }}
      TEST_IMAGE: ${{ inputs.test_image }}
      PUSH_README: ${{ inputs.push_readme }}
      APIKEY__QUAY_IO: ${{ secrets.QUAY_API }}
    steps:
      - uses: actions/checkout@v4
      - name: Install prerequisites - docker
        run: |
          sudo apt-get update
          sudo apt-get install ca-certificates curl
          sudo install -m 0755 -d /etc/apt/keyrings
          sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
          sudo chmod a+r /etc/apt/keyrings/docker.asc
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin dnf
          sudo usermod -aG docker $USER
          sudo systemctl enable --now docker
      - name: Build the container, test, push and push readme
        continue-on-error: true
        run: |
          pwd
          cd containers
          bash build-container.sh ${{ inputs.container_name }}

  build-containers:
    needs: [build_container_amd64, build_container_arm64]
    runs-on: ubuntu-latest
    if: always() && ${{ inputs.next_containers != '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Build containers
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          next_containers: ${{ inputs.next_containers }}
        run: |
          container=$(echo "$next_containers" | cut -d',' -f1)
          to_build_list=$(echo "$next_containers" | cut -d',' -f2-)
          if [[ $container == '' ]]; then
            echo "No more containers to build"
            exit 0
          fi
          echo "Container to build: $container"
          echo "Next container to build: $to_build_list"
          echo "Building container: $container"
          # The cut -d',' -f2- won't make empty list for single element ...
          if [[ $to_build_list == $container ]]; then
            gh workflow run build-manual.yml  --repo SourceMation/images -f container_name=$container
          else
            gh workflow run build-manual.yml  --repo SourceMation/images -f container_name=$container  -f next_containers=$to_build_list
          fi
